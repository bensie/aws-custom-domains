Parameters:
  ExpectedNameserversParameter:
    Description:
      If you're using a reuable delegation set and have configured custom
      CNAMEs for each nameserver, specify them here as a comma separated list
      (ns1.mydomain.com,ns2.mydomain.com). When verifying domain configuration,
      we'll use this list instead of the ones provided by Route53.
    Type: String
  ReusableDelegationSetIdParameter:
    Description:
      If you want all domains to point at the same nameservers, you'll need to
      create a reusable delegation set with the aws-cli and provide its ID
      here. If you leave this blank, each domain will be issued different
      nameservers. See http://docs.aws.amazon.com/cli/latest/reference/route53/create-reusable-delegation-set.html
    Type: String

Resources:
  ##
  ## S3
  ##
  CustomDomainsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - custom-domains
          - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId

  ##
  ## DynamoDB
  ##
  CustomDomainsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - '-'
        - - custom-domains
          - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      KeySchema:
        - AttributeName: DomainName
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: DomainName
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ##
  ## SNS
  ##
  TableStreamTopic:
    Type: AWS::SNS::Topic


  ##
  ## Lambda
  ##
  HandleCustomDomainsCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle custom domain creation from API Gateway
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 5
      MemorySize: 512
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/api-gateway/HandleCustomDomainsCreateFunction.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
          STATE_MACHINE_ARN: !Ref StateMachine
  HandleCustomDomainsShowFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle custom domain show from API Gateway
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 5
      MemorySize: 512
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/api-gateway/HandleCustomDomainsShowFunction.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
          STATE_MACHINE_ARN: !Ref StateMachine
  HandleCustomDomainsDestroyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Handle custom domain deletion from API Gateway
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 5
      MemorySize: 512
      Code:
        ZipFile: !Sub |
          exports.handler = (event, context, callback) => {
            var response = {
              statusCode: 200,
              body: JSON.stringify({ custom_domains_destroy: true })
            }
            callback(null, response)
          }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
          STATE_MACHINE_ARN: !Ref StateMachine
  DNSZoneCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup hosted zone creator
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/1_DNSHostedZoneCreator.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  DNSZoneVerifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup hosted zone verifier
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/2_DNSHostedZoneVerifier.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  SESDomainCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup SES domain creator
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/3_SESDomainCreator.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  SESDomainVerifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup SES domain verifier
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/4_SESDomainVerifier.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  ACMCertificateCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup ACM certificate creator
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/5_ACMCertificateCreator.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  ACMCertificateVerifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup ACM certificate verifier
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/6_ACMCertificateVerifier.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  CloudFrontDistributionCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup CloudFront distribution creator
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 20
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/7_CloudFrontDistributionCreator.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  CloudFrontDistributionDNSRecordCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup CloudFront distribution DNS record creator
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/8_CloudFrontDistributionDNSRecordCreator.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  CloudFrontDistributionVerifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup CloudFront distribution verifier
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/9_CloudFrontDistributionVerifier.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  SuccessHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup final success function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/10_SuccessHandler.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  CatchAllNonRecoverableFailureHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains setup catch all non-recoverable failure function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/lambda/SetupCustomDomain/00_CatchAllNonRecoverableFailureHandler.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref CustomDomainsTable
          BUCKET_NAME: !Ref CustomDomainsS3Bucket
          EXPECTED_NAMESERVERS: !Ref ExpectedNameserversParameter
          REUSABLE_DELEGATION_SET_ID: !Ref ReusableDelegationSetIdParameter
  StreamToSNSTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom domains DynamoDB stream to SNS trigger
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs6.10
      Timeout: 10
      Code:
        S3Bucket: aws-custom-domains
        S3Key: !Sub
          - ${Version}/dynamodb/StreamToSNSTrigger.zip
          - { Version: !FindInMap [ StaticVariables, Versions, Current ] }
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          DYNAMODB_STREAM_SNS_TOPIC: !Ref TableStreamTopic
  DynamoDBStreamToSNSFunctionSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CustomDomainsTable.StreamArn
      FunctionName: !GetAtt StreamToSNSTriggerFunction.Arn
      StartingPosition: TRIM_HORIZON

  ##
  ## API Gateway
  ##
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join
        - '-'
        - - custom-domains
          - !Select
            - 0
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
  CustomDomainsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: custom_domains
  CustomDomainsDomainNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref CustomDomainsResource
      PathPart: "{domain_name}"
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: CustomDomainCreateMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: v1
  CustomDomainCreateModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId: !Ref ApiGateway
      Schema:
        "$schema": "http://json-schema.org/draft-04/schema#"
        title: CustomDomainCreate
        type: object
        properties:
          origin_domain_name:
            type: string
  CustomDomainCreateRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: CustomDomainCreateRequestValidator
      RestApiId: !Ref ApiGateway
      ValidateRequestBody: true
      ValidateRequestParameters: true

  ##
  ## API Gateway Methods
  ##
  CustomDomainCreateMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: HandleCustomDomainsCreateFunction
    Properties:
      ResourceId: !Ref CustomDomainsDomainNameResource
      RestApiId: !Ref ApiGateway
      HttpMethod: POST
      AuthorizationType: NONE
      RequestModels:
        application/json: !Ref CustomDomainCreateModel
      RequestParameters:
        method.request.path.domain_name: true
      RequestValidatorId: !Ref CustomDomainCreateRequestValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !GetAtt HandleCustomDomainsCreateFunction.Arn
  CustomDomainShowMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: HandleCustomDomainsShowFunction
    Properties:
      ResourceId: !Ref CustomDomainsDomainNameResource
      RestApiId: !Ref ApiGateway
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.domain_name: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !GetAtt HandleCustomDomainsShowFunction.Arn
  CustomDomainDestroyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: HandleCustomDomainsDestroyFunction
    Properties:
      ResourceId: !Ref CustomDomainsDomainNameResource
      RestApiId: !Ref ApiGateway
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.domain_name: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
          - LambdaArn: !GetAtt HandleCustomDomainsDestroyFunction.Arn
  HandleCustomDomainsCreateFunctionExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HandleCustomDomainsCreateFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"
        - { Api: !Ref ApiGateway }
  HandleCustomDomainsShowFunctionExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HandleCustomDomainsShowFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"
        - { Api: !Ref ApiGateway }
  HandleCustomDomainsDestroyFunctionExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt HandleCustomDomainsDestroyFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"
        - { Api: !Ref ApiGateway }

  ##
  ## Step Function State Machine
  ##
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "Comment": "Setup a custom domain",
          "StartAt": "1_DNSZoneCreator",
          "States": {
            "1_DNSZoneCreator": {
              "Type": "Task",
              "Resource": "${DNSZoneCreatorFunction.Arn}",
              "Next": "2_DNSZoneVerifier",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "2_DNSZoneVerifier": {
              "Type": "Task",
              "Resource": "${DNSZoneVerifierFunction.Arn}",
              "Next": "3_SESDomainCreator",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 4320,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "3_SESDomainCreator": {
              "Type": "Task",
              "Resource": "${SESDomainCreatorFunction.Arn}",
              "Next": "4_SESDomainVerifier",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "4_SESDomainVerifier": {
              "Type": "Task",
              "Resource": "${SESDomainVerifierFunction.Arn}",
              "Next": "5_ACMCertificateCreator",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 480,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "5_ACMCertificateCreator": {
              "Type": "Task",
              "Resource": "${ACMCertificateCreatorFunction.Arn}",
              "Next": "6_ACMCertificateVerifier",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "6_ACMCertificateVerifier": {
              "Type": "Task",
              "Resource": "${ACMCertificateVerifierFunction.Arn}",
              "Next": "7_CloudFrontDistributionCreator",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 30,
                  "MaxAttempts": 480,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "7_CloudFrontDistributionCreator": {
              "Type": "Task",
              "Resource": "${CloudFrontDistributionCreatorFunction.Arn}",
              "Next": "8_CloudFrontDistributionDNSRecordCreator",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "8_CloudFrontDistributionDNSRecordCreator": {
              "Type": "Task",
              "Resource": "${CloudFrontDistributionDNSRecordCreatorFunction.Arn}",
              "Next": "9_CloudFrontDistributionVerifier",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "9_CloudFrontDistributionVerifier": {
              "Type": "Task",
              "Resource": "${CloudFrontDistributionVerifierFunction.Arn}",
              "Next": "10_SuccessHandler",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 60,
                  "MaxAttempts": 240,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ]
            },
            "10_SuccessHandler": {
              "Type": "Task",
              "Resource": "${SuccessHandlerFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "00_CatchAllNonRecoverableFailureHandler"
                }
              ],
              "End": true
            },
            "00_CatchAllNonRecoverableFailureHandler": {
              "Type": "Task",
              "Resource": "${CatchAllNonRecoverableFailureHandlerFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 5,
                  "BackoffRate": 1.0
                }
              ],
              "End": true
            }
          }
        }

      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-us-east-1

  ##
  ## Permissions
  ##
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: custom-domains-cloudwatch-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
        - PolicyName: custom-domains-route53-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:CreateHostedZone
                  - route53:GetHostedZone
                  - route53:ListHostedZones
                  - route53:DeleteHostedZone
                  - route53:ChangeResourceRecordSets
                Resource: "*"
        - PolicyName: custom-domains-cloudfront-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateDistribution
                  - cloudfront:UpdateDistribution
                  - cloudfront:DeleteDistribution
                  - cloudfront:GetDistribution
                Resource: "*"
        - PolicyName: custom-domains-certificate-manager-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:DescribeCertificate
                  - acm:RequestCertificate
                  - acm:DeleteCertificate
                  - acm:GetCertificate
                  - acm:ListCertificates
                Resource: "*"
        - PolicyName: custom-domains-dynamodb-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt CustomDomainsTable.Arn
        - PolicyName: custom-domains-dynamodb-stream-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !Sub ${CustomDomainsTable.Arn}/stream/*
        - PolicyName: custom-domains-ses-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:VerifyDomainIdentity
                  - ses:VerifyDomainDkim
                  - ses:GetIdentityVerificationAttributes
                  - ses:GetIdentityDkimAttributes
                  - ses:SetIdentityDkimEnabled
                Resource: "*"
        - PolicyName: custom-domains-stepfunctions-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: "*" # !Ref StateMachine causes circular dep
        - PolicyName: custom-domains-sns-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TableStreamTopic

Outputs:
  CustomDomainsAPIURL:
    Description: Custom domains API URL
    Value: !Sub
      - "https://${ApiID}.execute-api.${AWS::Region}.amazonaws.com/v1/custom_domains"
      - ApiID: !Ref ApiGateway
